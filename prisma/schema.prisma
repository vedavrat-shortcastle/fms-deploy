generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

// Organization Schema
model Organization {
  id      String  @id @default(uuid())
  name    String
  type    OrgType
  country String
  domain  String  @unique // White-labeling domain
  logo    String?

  // Relation Fix: Differentiate members and admins
  members User[] @relation(name: "OrgMembers")
  admins  User[] @relation(name: "OrgAdmins")

  clubs         Club[]
  events        Event[]
  subscriptions Subscription[]

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@map("organization")
}

// Club Schema
model Club {
  id   String @id @default(uuid())
  name String

  // Relation Fix: Differentiate manager and members
  manager   User   @relation(name: "ClubManager", fields: [managerId], references: [id])
  managerId String @unique @map("manager_id")

  members User[] @relation(name: "ClubMembers")

  organization   Organization @relation(fields: [organizationId], references: [id])
  organizationId String       @map("organization_id")

  createdAt DateTime @default(now()) @map("created_at")

  @@unique([name, organizationId])
  @@map("club")
}

// User Schema
model User {
  id          String           @id @default(uuid())
  email       String
  password    String
  role        Role             @default(MEMBER)
  permissions UserPermission[]

  // Relation Fix: Reference named relations
  organization   Organization? @relation(name: "OrgMembers", fields: [organizationId], references: [id])
  organizationId String?       @map("organization_id")

  adminOf             Organization? @relation(name: "OrgAdmins", fields: [adminOrganizationId], references: [id])
  adminOrganizationId String?       @map("admin_organization_id")

  club   Club?   @relation(name: "ClubMembers", fields: [clubId], references: [id])
  clubId String? @map("club_id")

  managedClub Club? @relation(name: "ClubManager")

  // Personal Info
  firstName  String    @map("first_name")
  lastName   String    @map("last_name")
  middleName String?   @map("middle_name")
  nameSuffix String?   @map("name_suffix")
  birthDate  DateTime @map("birth_date")
  gender     Gender
  avatarUrl  String?   @map("avatar_url")
  ageProof   String   @map("age_proof") // URL of uploaded age proof document

  // Mailing Details
  streetAddress  String @map("street_address")
  streetAddress2 String? @map("street_address2")
  country        String
  state          String
  city           String
  postalCode     String @map("postal_code")
  phoneNumber    String?  @map("phone_number")
  countryCode    String?  @map("country_code")

  // Other Info
  fideId         String?   @unique @map("fide_id")
  schoolName     String?   @map("school_name")
  graduationYear Int?      @map("graduation_year")
  gradeInSchool  String?   @map("grade_in_school")
  gradeDate      DateTime? @map("grade_date")
  clubName       String?   @map("club_name")
  isDisabled     Boolean   @default(false) @map("is_disabled")

  subscriptions Subscription[]
  createdAt     DateTime       @default(now()) @map("created_at")

  @@unique([email, organizationId])
  @@map("user")
}

// Subscription Schema
model Subscription {
  id             String       @id @default(uuid())
  organization   Organization @relation(fields: [organizationId], references: [id])
  organizationId String       @map("organization_id")

  subscriber   User   @relation(fields: [subscriberId], references: [id])
  subscriberId String @map("subscriber_id")

  type      SubscriptionType
  status    SubscriptionStatus
  startDate DateTime           @map("start_date")
  endDate   DateTime           @map("end_date")
  createdAt DateTime           @default(now()) @map("created_at")

  @@map("subscription")
}

// Event Schema
model Event {
  id             String       @id @default(uuid())
  name           String
  description    String?
  image          String?
  video          String?
  mode           EventMode
  venue          String?
  startDate      DateTime     @map("start_date")
  startTime      String       @map("start_time")
  endDate        DateTime     @map("end_date")
  endTime        String       @map("end_time")
  contactInfo    ContactInfo  @relation(fields: [contactInfoId], references: [id])
  organization   Organization @relation(fields: [organizationId], references: [id])
  organizationId String       @map("organization_id")
  format         EventFormat
  numberOfRounds Int          @map("number_of_rounds")
  isRated        Boolean      @map("is_rated")
  timeControl    String?      @map("time_control")
  entryFees      EntryFee[]
  brochure       String? // URL to brochure (PDF/Image)
  aboutEvent     String?      @map("about_event") // Quill formatted content
  prizesAwards   String?      @map("prizes_awards") // Quill formatted content
  faq            String? // Quill formatted content
  createdAt      DateTime     @default(now()) @map("created_at")
  contactInfoId  String       @map("contact_info_id")

  @@map("event")
}

// Entry Fee Model
model EntryFee {
  id       String @id @default(uuid())
  event    Event  @relation(fields: [eventId], references: [id])
  eventId  String @map("event_id")
  category String // e.g., "Open", "Under 19", "Under 9"
  amount   Float
  currency String // e.g., "USD", "EUR"

  @@map("entry_fee")
}

// ContactInfo Embedded Model
model ContactInfo {
  id          String  @id @default(uuid())
  name        String
  phoneNumber String  @map("phone_number")
  email       String
  website     String?
  Event       Event[]

  @@map("contact_info")
}

// Enums
enum OrgType {
  NATIONAL
  REGIONAL
}

enum Role {
  SUPER_ADMIN // Platform-wide admin
  ORG_ADMIN // Organization-level admin
  CLUB_MANAGER // Manages a club
  MEMBER // Regular user
}

enum Gender {
  MALE
  FEMALE
  OTHER
}

enum SubscriptionType {
  INDIVIDUAL
  EVENT
}

enum SubscriptionStatus {
  ACTIVE
  EXPIRED
  CANCELED
}

enum EventMode {
  ONLINE
  OFFLINE
}

enum EventFormat {
  SWISS
  QUAD
  TEAM
}

//
//***************************************************    RBAC SETUP    ***************************************************
//

model Permission {
  id          String           @id @default(uuid())
  name        String           @unique
  code        String           @unique
  description String?
  createdAt   DateTime         @default(now()) @map("created_at")
  updatedAt   DateTime         @default(now()) @map("updated_at")
  users       UserPermission[]

  @@map("permission")
}

model UserPermission {
  userId       String     @map("admin_user_id")
  permissionId String     @map("permission_id")
  createdAt    DateTime   @default(now()) @map("created_at")
  updatedAt    DateTime   @default(now()) @map("updated_at")
  user         User       @relation(fields: [userId], references: [id])
  permission   Permission @relation(fields: [permissionId], references: [id])

  @@id([userId, permissionId])
  @@map("user_permission")
}
