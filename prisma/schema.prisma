generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model BaseUser {
  id           String     @id @default(uuid())
  email        String     @db.VarChar(255)
  password     String     @db.VarChar(255)
  role         Role
  firstName    String     @map("first_name") @db.VarChar(100)
  lastName     String     @map("last_name") @db.VarChar(100)
  middleName   String?    @map("middle_name") @db.VarChar(100)
  nameSuffix   String?    @map("name_suffix") @db.VarChar(50)
  federation   Federation @relation(fields: [federationId], references: [id], name: "FederationBaseUsers")
  federationId String     @map("federation_id")
  createdAt    DateTime   @default(now()) @map("created_at")
  updatedAt    DateTime   @updatedAt @map("updated_at")

  // Single relation to UserProfile
  profile UserProfile?

  @@unique([email, federationId])
  @@map("base_user")
}

model UserProfile {
  id         String   @id @default(uuid())
  baseUser   BaseUser @relation(fields: [baseUserId], references: [id])
  baseUserId String   @unique @map("base_user_id")

  // Polymorphic fields with enum
  profileType ProfileType
  profileId   String // ID of the specific profile record

  userStatus  UserStatus       @default(ACTIVE) @map("user_status")
  deletedAt   DateTime?        @map("deleted_at")
  permissions UserPermission[]

  @@unique([profileType, profileId])
  @@map("user_profile")
}

// Club Manager Schema
model ClubManager {
  id        String   @id @default(uuid())
  club      Club     @relation(fields: [clubId], references: [id], name: "ClubManager")
  clubId    String   @unique @map("club_id")
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@map("club_manager")
}

// Parent Schema
model Parent {
  id String @id @default(uuid())

  // Contact Details
  phoneNumber String? @map("phone_number")

  // Address Details
  streetAddress  String  @map("street_address")
  streetAddress2 String? @map("street_address2")
  country        String
  state          String
  city           String
  postalCode     String  @map("postal_code")

  // Relationships
  players Player[] @relation("ParentPlayers")

  // Timestamps
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@map("parent")
}

// Player Schema
model Player {
  id        String    @id @default(uuid())
  birthDate DateTime? @map("birth_date")
  avatarUrl String?   @map("avatar_url")
  ageProof  String?   @map("age_proof") // URL of uploaded age proof document
  gender    Gender?
  customId  String    @unique @map("custom_id")

  // Mailing Details
  streetAddress  String? @map("street_address")
  streetAddress2 String? @map("street_address2")
  country        String?
  state          String?
  city           String?
  postalCode     String? @map("postal_code")
  phoneNumber    String? @map("phone_number")

  // Other Info
  fideId         String?   @map("fide_id")
  schoolName     String?   @map("school_name")
  graduationYear Int?      @map("graduation_year")
  gradeInSchool  String?   @map("grade_in_school")
  gradeDate      DateTime? @map("grade_date")
  clubName       String?   @map("club_name")

  subscriptions Subscription[]
  club          Club?          @relation(name: "ClubPlayers", fields: [clubId], references: [id])
  clubId        String?
  parent        Parent?        @relation(fields: [parentId], references: [id], name: "ParentPlayers")
  parentId      String?
  createdAt     DateTime       @default(now()) @map("created_at")

  @@map("player")
}

// Federation Admin Schema
model FederationAdmin {
  id           String     @id @default(uuid())
  federation   Federation @relation(name: "FedAdmins", fields: [federationId], references: [id])
  federationId String     @unique @map("federation_id")
  phoneNumber  String?    @map("phone_number")

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@map("federation_admin")
}

// Federation Schema
model Federation {
  id         String  @id @default(uuid())
  name       String
  type       FedType
  country    String
  domain     String  @unique // White-labeling domain
  logo       String?
  isApproved Boolean @default(false) @map("is_approved")
  shortCode  String  @unique

  // Relation Fix: Differentiate players and admins\
  admins    FederationAdmin[] @relation(name: "FedAdmins")
  baseUsers BaseUser[]        @relation(name: "FederationBaseUsers")

  clubs         Club[]
  events        Event[]
  subscriptions Subscription[]

  createdAt      DateTime         @default(now()) @map("created_at")
  updatedAt      DateTime         @updatedAt @map("updated_at")
  MembershipPlan MembershipPlan[]
  FormTemplate   FormTemplate[]

  @@map("federation")
}

// Club Schema
model Club {
  id   String @id @default(uuid())
  name String

  // Relation Fix: Differentiate manager and players
  managerId    String        @unique @map("manager_id")
  clubManagers ClubManager[] @relation(name: "ClubManager")

  players Player[] @relation(name: "ClubPlayers")

  federation   Federation @relation(fields: [federationId], references: [id])
  federationId String     @map("federation_id")

  createdAt DateTime @default(now()) @map("created_at")

  @@unique([name, federationId])
  @@map("club")
}

// Subscription Schema
model Subscription {
  id           String     @id @default(uuid())
  federation   Federation @relation(fields: [federationId], references: [id])
  federationId String     @map("federation_id")

  subscriber   Player @relation(fields: [subscriberId], references: [id])
  subscriberId String @map("subscriber_id")

  type      SubscriptionType
  status    SubscriptionStatus @default(ACTIVE)
  startDate DateTime           @map("start_date")
  endDate   DateTime           @map("end_date")

  // Optional relation for event subscriptions
  event   Event?  @relation(fields: [eventId], references: [id])
  eventId String? @map("event_id")

  // Optional relation for membership subscriptions
  plan   MembershipPlan? @relation(fields: [planId], references: [id])
  planId String? //TODO: Make this mandatory

  // Remove these as they're now in Transaction model
  // paymentStatus PaymentStatus      @default(PENDING)
  // amount        Float
  // currency      String

  transactions Transaction[]
  createdAt    DateTime      @default(now()) @map("created_at")
  updatedAt    DateTime      @updatedAt @map("updated_at")

  @@map("subscription")
}

model Transaction {
  id             String       @id @default(uuid())
  subscription   Subscription @relation(fields: [subscriptionId], references: [id])
  subscriptionId String       @map("subscription_id")

  // Payment Gateway Details
  gatewayTransactionId String @map("gateway_transaction_id")
  gatewayName          String @map("gateway_name") // e.g., "stripe", "razorpay"

  // Amount Details
  amount   Float
  currency String
  status   PaymentStatus @default(PENDING)

  // Payment Method Details
  paymentMethod String @map("payment_method")

  // Response from Gateway
  gatewayResponse Json? @map("gateway_response")

  // Metadata
  metadata     Json?
  errorMessage String? @map("error_message")

  // Timestamps
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@map("transaction")
}

// Membership Plan Schema
model MembershipPlan {
  id            String         @id @default(uuid())
  name          String
  description   String?
  duration      Int // in days
  price         Float
  currency      String
  benefits      String[]
  autoRenewal   Boolean        @default(false)
  status        PlanStatus     @default(ACTIVE)
  criteria      Json? // Flexible criteria storage
  federation    Federation     @relation(fields: [federationId], references: [id])
  federationId  String
  subscriptions Subscription[]
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt

  @@map("membership_plan")
}

// Event Schema
model Event {
  id             String         @id @default(uuid())
  name           String
  description    String?
  image          String?
  video          String?
  mode           EventMode
  venue          String?
  startDate      DateTime       @map("start_date")
  startTime      String         @map("start_time")
  endDate        DateTime       @map("end_date")
  endTime        String         @map("end_time")
  contactInfo    ContactInfo    @relation(fields: [contactInfoId], references: [id])
  federation     Federation     @relation(fields: [federationId], references: [id])
  federationId   String         @map("federation_id")
  format         EventFormat
  numberOfRounds Int            @map("number_of_rounds")
  isRated        Boolean        @map("is_rated")
  timeControl    String?        @map("time_control")
  entryFees      EntryFee[]
  brochure       String? // URL to brochure (PDF/Image)
  aboutEvent     String?        @map("about_event") // Quill formatted content
  prizesAwards   String?        @map("prizes_awards") // Quill formatted content
  faq            String? // Quill formatted content
  createdAt      DateTime       @default(now()) @map("created_at")
  contactInfoId  String         @map("contact_info_id")
  Subscription   Subscription[]

  @@map("event")
}

// Entry Fee Model
model EntryFee {
  id       String @id @default(uuid())
  event    Event  @relation(fields: [eventId], references: [id])
  eventId  String @map("event_id")
  category String // e.g., "Open", "Under 19", "Under 9"
  amount   Float
  currency String // e.g., "USD", "EUR"

  @@map("entry_fee")
}

// ContactInfo Embedded Model
model ContactInfo {
  id          String  @id @default(uuid())
  name        String
  phoneNumber String  @map("phone_number")
  email       String
  website     String?
  Event       Event[]

  @@map("contact_info")
}

// --------------------------------------------------- CUSTOM FORM SETUP --------------------------------------------------- //

model FormTemplate {
  id           String      @id @default(uuid())
  federation   Federation  @relation(fields: [federationId], references: [id])
  federationId String      @map("federation_id")
  formType     FormType // enum for different form types
  isActive     Boolean     @default(true) @map("is_active")
  fields       FormField[]
  createdAt    DateTime    @default(now()) @map("created_at")
  updatedAt    DateTime    @updatedAt @map("updated_at")

  @@unique([federationId, formType])
  @@map("form_template")
}

model FormField {
  id             String       @id @default(uuid())
  formTemplate   FormTemplate @relation(fields: [formTemplateId], references: [id])
  formTemplateId String       @map("form_template_id")
  fieldName      String       @map("field_name")
  displayName    String       @map("display_name")
  fieldType      FieldType
  isHidden       Boolean      @default(false) @map("is_hidden")
  isMandatory    Boolean      @default(false) @map("is_mandatory")
  isDisabled     Boolean      @default(false) @map("is_disabled")
  defaultValue   String?      @map("default_value")
  placeholder    String?
  validations    Json?        @db.JsonB // For custom validation rules
  order          Int          @default(0)
  isCustomField  Boolean      @default(false) @map("is_custom_field")
  createdAt      DateTime     @default(now()) @map("created_at")
  updatedAt      DateTime     @updatedAt @map("updated_at")

  @@unique([formTemplateId, fieldName])
  @@map("form_field")
}

// Add these new enums
enum FormType {
  PLAYER
  PARENT
  EVENT
  CLUB
  SUBSCRIPTION
}

enum FieldType {
  TEXT
  NUMBER
  EMAIL
  PHONE
  DATE
  SELECT
  MULTISELECT
  CHECKBOX
  RADIO
  TEXTAREA
  FILE
  COUNTRY
  STATE
  CITY
}

// --------------------------------------------------- ENUMS --------------------------------------------------- //

// Enums
enum FedType {
  NATIONAL
  REGIONAL
}

enum ProfileType {
  PARENT
  PLAYER
  FEDERATION_ADMIN
  CLUB_MANAGER
  COACH
  ARBITER
  TOURNAMENT_DIRECTOR
  STUDENT
  VOLUNTEER
}

enum Role {
  FED_ADMIN
  CLUB_MANAGER
  PARENT
  PLAYER
  COACH
  ARBITER
  VOLUNTEER
}

enum Gender {
  MALE
  FEMALE
  OTHER
}

enum PlanStatus {
  ACTIVE
  INACTIVE
  ARCHIVED
}

enum PaymentStatus {
  PENDING
  COMPLETED
  FAILED
  REFUNDED
}

enum SubscriptionType {
  INDIVIDUAL
  EVENT
}

enum SubscriptionStatus {
  ACTIVE
  EXPIRED
  CANCELED
}

enum EventMode {
  ONLINE
  OFFLINE
}

enum EventFormat {
  SWISS
  QUAD
  TEAM
}

enum UserStatus {
  ACTIVE
  INACTIVE
  DELETED
}

// --------------------------------------------------- RBAC SETUP --------------------------------------------------- //

model Permission {
  id          String           @id @default(uuid())
  name        String           @unique
  code        String           @unique
  description String?
  createdAt   DateTime         @default(now()) @map("created_at")
  updatedAt   DateTime         @default(now()) @map("updated_at")
  users       UserPermission[]

  @@map("permission")
}

model UserPermission {
  userId       String      @map("user_profile_id")
  permissionId String      @map("permission_id")
  createdAt    DateTime    @default(now()) @map("created_at")
  user         UserProfile @relation(fields: [userId], references: [id])
  permission   Permission  @relation(fields: [permissionId], references: [id])

  @@id([userId, permissionId])
  @@map("user_permission")
}
